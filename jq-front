#!/usr/bin/env bash
set -E -o nounset -o errexit +o posix -o pipefail
shopt -s inherit_errexit

readonly JF_BASEDIR=$(dirname "$(readlink --canonicalize "${0}")")
export JF_BASEDIR
# shellcheck disable=SC1090
# source = lib/jq-front.rc
source "${JF_BASEDIR}/lib/jq-front.rc"
# shellcheck disable=SC1090
# source = lib/core.sh
source "${JF_BASEDIR}/lib/core.sh"
# shellcheck disable=SC1090
# source = lib/nodepool.sh
source "${JF_BASEDIR}/lib/nodepool.sh"
# shellcheck disable=SC1090
# source = lib/json.sh
source "${JF_BASEDIR}/lib/json.sh"
# shellcheck disable=SC1090
# source = lib/dependency.sh
source "${JF_BASEDIR}/lib/dependency.sh"
# shellcheck disable=SC1090
# source = lib/inheritance.sh
source "${JF_BASEDIR}/lib/inheritance.sh"
# shellcheck disable=SC1090
# source = lib/helpers.sh
source "${JF_BASEDIR}/lib/templating.sh"
# shellcheck disable=SC1090
# source = lib/helpers.sh
source "${JF_BASEDIR}/lib/helpers.sh"
# shellcheck disable=SC1090
# source = build.sh
source "${JF_BASEDIR}/build_info.sh"

function perform_jqfront() {
  function _sourced_files_dir() {
    echo "${_JF_SESSION_DIR}/source_files"
  }
  local _target="${1}" _templating="${2}" _templating_level="${3}" _validation_mode="${4}" _jf_path="${5}"
  local _content
  perf "begin"
  mkdir -p "$(_sourced_files_dir)"
  _content="$(expand_inheritances "${_target}" "${_validation_mode}" "${_jf_path}")"
  _content=$(echo "${_content}" | jq '.|del(."$local")')
  if [[ "${_templating}" == "yes" ]]; then
    local _out
    _out=$(mktemp_with_content "${_content}")
    _content=$(perform_templating "${_out}" "${_templating_level}")
  fi
  echo "${_content}"
  perf "end"
}

function prepare_temporary_directory() {
  mkdir -p "${TMPDIR}"
}

function export_names() {
  # for script inheritance
  export -f find_file
  export -f search_file_in
  export -f abort
  export -f message
  export -f debug
  export -f is_debug_enabled
  export _JF_PATH
  export _JF_PATH_BASE
  export TMPDIR
  #
  export _JF_POOL_DIR
  export _JF_SCHEMA_DIR
  _JF_POOL_DIR="$(nodepool_prepare)"
  _JF_SCHEMA_DIR="${JF_BASEDIR}/schema"
}

function usage() {
  message "Usage: $0 [-h|--help] [-o OUT] [--validation=[no|lenient|strict]] [nested-templating-levels] [--xargs=""] [--version] TARGET"
}

function version() {
  local _version_file="${JF_BASEDIR}/version_file"
  if [[ -e "${_version_file}" ]]; then
    cat "${_version_file}" >&2
  else
    echo "${TARGET_VERSION}(develop)" >&2
  fi
}

function main() {
  local _templating_enabled=yes _nested_templating_levels=5 _validation=no
  local xargs_options="" xargs="no" xargs_jqfront_options=("${@}") outfile=""
  local options
  info "command line: ${0} ${*}"
  # Call getopt to validate the provided input.
  options=$(getopt \
    -o heo: \
    --long help,version,validation:,nested-templating-levels:,xargs: -- "$@") || {
    usage
    abort "Failed to  parse command line:'$*'"
  }
  if [[ $# -gt 0 ]]; then
    eval set -- "$options"
    while true; do
      case "${1}" in
      -h | --help)
        usage
        exit 0
        ;;
      --version)
        version
        exit 0
        ;;
      -o)
        outfile=$2
        shift
        shift
        ;;
      --nested-templating-levels)
        _nested_templating_levels=$2
        [[ "$2" != 0 ]] || _templating_enabled=no
        shift
        shift
        ;;
      --validation)
        _validation=$2
        shift
        shift
        ;;
      --xargs)
        xargs="yes"
        xargs_options="${2}"
        shift
        shift
        ;;
      --)
        shift
        break
        ;;
      *)
        abort "Internal error!"
        ;;
      esac
    done
  fi
  if [[ "${xargs}" == "yes" ]]; then
    local i _cmd
    for i in "${!xargs_jqfront_options[@]}"; do
      [[ "${xargs_jqfront_options[${i}]}" == "--xargs="* ]] && unset -v 'xargs_jqfront_options[$i]'
    done
    xargs_jqfront_options=("${xargs_jqfront_options[@]}")
    _cmd="$(readlink -f "${BASH_SOURCE[0]}") ${xargs_jqfront_options[*]}"
    info "batch-mode: command line: 'xargs ${xargs_options} bash -c \"${_cmd}\"'"
    # shellcheck disable=SC2086
    xargs ${xargs_options} bash -c "${_cmd}"
  else
    function perform() {
      perform_jqfront "${_target}" "${_templating_enabled}" "${_nested_templating_levels}" "${_validation}" "${_JF_PATH}"
    }
    if [[ $# == 0 ]]; then
      _target="$(mktemp_with_content "$(cat)")" || abort "Failed to create a temporary file"
    else
      _target="${1}"
    fi
    mkdir -p "${_JF_SESSION_DIR}"
    if [[ "${outfile}" != "" ]]; then
      local _dir
      _dir="$(dirname "${outfile}")"
      [[ -d "${_dir}" ]] || abort "No directory:'${_dir}' is found"
      [[ -w "${_dir}" ]] || abort "Cannot write a file under a directory:'${_dir}'"
      [[ ! -e "${outfile}" || -w "${outfile}" ]] || abort "Cannot write to a file:'${outfile}'"
      perform >"${outfile}"
    else
      perform
    fi
  fi
}

print_global_variables
prepare_temporary_directory
export_names
define_nodeentry_reader "expand_inheritances" "${_JF_POOL_DIR}"

main "${@}"
