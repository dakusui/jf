#!/usr/bin/env bash
set -eu

JF_BASEDIR=$(dirname "$(readlink --canonicalize "${0}")")
export JF_BASEDIR

# shellcheck disable=SC1090
# source = lib/shared.sh
source "${JF_BASEDIR}/lib/shared.sh"
# shellcheck disable=SC1090
# source = lib/templating.sh
source "${JF_BASEDIR}/lib/templating.sh"

function _mangle_path() {
  local _path="${1}"
  local _path_base="${2}"
  local _ret=""
  IFS=":" read -r -a _arr <<<"${_path}"
  for i in "${_arr[@]}"; do
    local _cur="${_path_base}"
    if [[ ${i} == .* ]]; then
      _cur="${_cur}/${i/./${_JF_CWD}}"
    else
      _cur="${_cur}${i}"
    fi
    if [[ "${_ret}" == "" ]]; then
      _ret="${_cur}"
    else
      _ret="${_ret}:${_cur}"
    fi
  done
  echo ":${_JF_PATH_BASE}:${_ret}"
}

function _remove_meta_nodes() {
  local _target="${1}"
  local _cur
  local _content
  _content="$(cat "${_target}")"
  if [[ $(is_object "${_content}") == true ]]; then
    _cur="$(mktemp_with_content "$(cat "${_target}")")"
    # Intentional single quote to find a keyword that starts with '$'
    # shellcheck disable=SC2016
    for i in $(all_paths "${_content}" | grep '"$extends"$'); do
      local _next
      _next="$(mktemp_with_content "$(jq ".|del(${i})" "${_cur}")")"
      _cur="${_next}"
    done
    jq '.|del(."$private")' "${_cur}"
  else
    echo "${_content}"
  fi
}

# Latter overrides former
function _merge_object_nodes() {
  local _a="${1}"
  local _b="${2}"
  jq -s '.[0] * .[1]' "${_a}" "${_b}"
}

function _expand_internal_inheritances() {
  local _target="${1}"
  local _validation_mode="${2}"
  local _path="${3}"
  local _cur
  local _in
  _cur=$(mktemp_with_content '{}')
  debug "(begin:_expand_internal_inheritances:1:${_target})"
  # Intentional single quote to find a keyword that starts with '$'
  # shellcheck disable=SC2016
  for i in $(all_paths "$(cat "${_target}")" | grep '"$extends"$'); do
    debug "->_expand_internal_inheritances:2:${i})"
    while IFS= read -r j; do
      local _next
      local _jj
      debug "-->_expand_internal_inheritances:3:${j})"
      _jj="$(read_file_from_path "${j}" "${_path}")"
      validate_jf_json "${_jj}" "${_validation_mode}" || abort "failed on validation"
      local _merged_piece
      local _p
      _p="${i%.\"\$extends\"}"
      local _cur_content
      _cur_content="$(cat "${_cur}")"
      if [[ $(has_value_at "${_p}" "${_cur_content}") == true ]]; then
        local _cur_piece
        _cur_piece=$(mktemp_with_content "$(echo "${_cur_content}" | jq "${_p}")")
        _merged_piece=$(mktemp_with_content "$(_merge_object_nodes "${_cur_piece}" "${_jj}")")
      else
        _merged_piece=${_jj}
      fi
      _next=$(mktemp_with_content "$(jq -n "input | ${_p}=input" "${_cur}" "${_merged_piece}")") ||
        abort "failed on node replacing; _cur=$(cat "${_cur}"); _merged_piece=$(cat "${_merged_piece}")"
      _cur="${_next}"
    done <<<"$(jq -r -c "${i}[]" "${_target}")"
  done
  debug "(end:_expand_internal_inheritances:1)"
  jq -r -c . "${_cur}"
}

function _validate_jf_json_with() {
  local _in="${1}"
  local _mode="${2}"
  local _out=
  {
    _out=$(ajv validate -s "${_JF_SCHEMA_DIR}/${_mode}.json" -d "${_in}" 2>&1)
  } || abort "Validation for '${_in}' was failed:\n${_out}"
}

function read_file_from_path() {
  local _target="${1}"
  local _path="${2}"
  IFS=';' read -r -a _arr <<<"${_target}"
  if [[ ${#_arr[@]} -le 1 ]]; then
    search_file_in "${1}" "${2}"
    return $?
  elif [[ ${#_arr[@]} -gt 1 ]]; then
    local _f
    _f="$(search_file_in "${_arr[0]}" "${_path}")" || quit "Script file ${_arr[1]} was not found in '${_path}'"
    mktemp_with_content "$(${_arr[1]} "${_f}" "${_arr[@]:2}")"
    return $?
  fi
}

function export_names_for_script_inheritance() {
  export -f find_file
  export -f search_file_in
  export _JF_PATH
  export _JF_PATH_BASE
}

function validate_jf_json() {
  local _in="${1}"
  local _mode="${2}"
  if [[ "${_mode}" == "no" ]]; then
    return 0
  elif [[ "${_mode}" == "strict" ]]; then
    _validate_jf_json_with "${_in}" "strict" || return 1
  elif [[ "${_mode}" == "lenient" ]]; then
    _validate_jf_json_with "${_in}" "lenient" || return 1
  else
    message "Unknown validation mode:'${_mode}' was set."
    exit 1
  fi
}

function expand_external_inheritances() {
  local _target="${1}"
  local _validation_mode="${2}"
  local _path="${3}"
  local _in
  debug "begin:expand_external_inheritances:target=${_target}"
  ####
  # This is intentionally using single quotes to pass quoted path expression to jq.
  # shellcheck disable=SC2016
  local _cur
  local _content
  _in="$(read_file_from_path "${_target}" "${_path}")" || quit "${_target} was not found in ${_path}"
  debug "validating ${_in}"
  validate_jf_json "${_in}" "${_validation_mode}" || quit "Validation failed:${_in}:content=""$(cat "${_in}")"""
  debug "...validated"
  _path="$(dirname "$(readlink --canonicalize "$_in")"):${_path}"
  _content="$(cat "${_in}")"
  _cur="$(mktemp_with_content "${_content}")"
  if [[ $(is_object "${_content}") == true ]]; then
    # shellcheck disable=SC2016
    # this is intentionally suppressing expansion to pass the value to jq.
    if [[ $(has_value_at '."$extends"' "${_content}") == true ]]; then
      local i
      while IFS= read -r i; do
        local _next
        local _tmp
        _tmp=$(mktemp_with_content "$(expand_external_inheritances "$i" "${_validation_mode}" "${_path}")")
        _next=$(mktemp_with_content "$(_merge_object_nodes "${_tmp}" "${_cur}")")
        _cur="${_next}"
      done <<<"$(value_at '."$extends"[]' "${_content}")"
    fi
    jq -r -c '.|del(.["$extends"])' "$(read_file_from_path "${_cur}" "${_path}")"
  else
    cat "$(read_file_from_path "${_cur}" "${_path}")"
  fi
  debug "end:expand_external_inheritances"
}

function materialize_private_nodes() {
  local _target="${1}"
  local _content
  local _ret
  debug "begin:materialize_private_nodes"
  _content="$(cat "${_target}")"
  _ret="$(mktemp -d)"
  # Intentional single quotes for jq.
  # shellcheck disable=SC2016
  if [[ $(has_value_at '."$private"' "${_content}") == true ]]; then
    # shellcheck disable=SC2016
    for i in $(keys_of '."$private"' "${_content}"); do
      echo "${_content}" | jq '."$private".''"'"${i}"'"' >"${_ret}/${i}"
    done
  fi
  echo "${_ret}"
  debug "end:materialize_private_nodes"
}

#$(dirname "$(readlink --canonicalize "$j")"):
function expand_internal_inheritances() {
  local _target="${1}"
  local _validation_mode="${2}"
  local _path="${3}"
  local _expanded
  local _expanded_clean
  local _clean
  debug "begin:expand_internal_inheritances:_target=${_target}"
  debug "step(1):main:_target=${_target}"
  _expanded=$(mktemp_with_content "$(_expand_internal_inheritances "${_target}" "${_validation_mode}" "${_path}")")
  debug "step(2a):remove meta nodes from target"
  _clean=$(mktemp_with_content "$(_remove_meta_nodes "${_target}")")
  debug "step(2b):remove meta nodes from expanded"
  _expanded_clean=$(mktemp_with_content "$(_remove_meta_nodes "${_expanded}")")
  debug "step(3):merge object nodes"
  _merge_object_nodes "${_expanded_clean}" "${_clean}"
  debug "end:expand_internal_inheritances"
}

function expand_inheritances_of_private_nodes() {
  local _path="${1}"
  local _templating="${2}"
  local _jf_path="${3}"
  debug "begin: expand_inheritances_of_private_nodes in ${_path}"
  while IFS= read -r -d '' i; do
    local _tmp
    local _f="${i}"
    debug "expanding inheritance of private node:${i}"
    _tmp="$(mktemp_with_content "$(run_jf "${_f}" "no" "no" "${_path}:${_jf_path}")")"
    cp "${_tmp}" "${_f}"
    debug "...expanded"
  done < <(find "${_path}" -maxdepth 1 -type f -print0)
  debug "end:   expand_inheritances_of_private_nodes"
}

function perform_templating() {
  debug "begin:perform_templating"
  local _src_file="${1}"
  local _content
  local _ret
  _content=$(sed -r 's/\"/\\\"/g' <"${_src_file}")
  _ret=$(eval "echo \"${_content}\"") || {
    message "Failed to process a file '${_src_file}'(content='${_content}')"
    return 1
  }
  echo "${_ret}"
  debug "end:perform_templating"
}

####
#
# Function intended to be used on 'script inheritance'.
# Search for a file from an environment variable "_JF_PATH" and prints an absolute path of it if found.
# In case it is not found, 1 will be returned
#
function find_file() {
  local _target="${1}"
  search_file_in "${_target}" "${_JF_PATH}" || {
    return $?
  }
  return 0
}

function run_jf() {
  local _target="${1}"
  local _content
  local _templating="${2}"
  local _jf_path="${4}"
  local _out
  debug "begin:run_jf:_target=${_target}"
  _target="$(read_file_from_path "${_target}" "${_jf_path}")"
  _content="$(cat "${_target}")" || abort "Failed to read file '${_target}'"
  if [[ $(is_object "${_content}") == true ]]; then
    local _tmp
    local _validation_mode="${3}"
    local _private_nodes_dir
    # If we use mktemp_with_content here, somehow an error happens. Let's fix it later.
    _tmp="$(mktemp)"
    expand_external_inheritances "${_target}" "${_validation_mode}" "${_jf_path}" >"${_tmp}"
    _private_nodes_dir=$(materialize_private_nodes "${_tmp}")
    expand_inheritances_of_private_nodes "${_private_nodes_dir}" \
      "${_templating}" \
      "${_private_nodes_dir}:${_jf_path}"
    _out=$(mktemp_with_content "$(expand_internal_inheritances "${_tmp}" "${_validation_mode}" "${_private_nodes_dir}:${_jf_path}")")
  else
    debug "non object file:${_target}"
    _out="$(mktemp_with_content "${_content}")"
  fi
  if [[ "${_templating}" == "yes" ]]; then
    perform_templating "${_out}"
  else
    cat "${_out}"
  fi
  debug "end:run_jf"
}

function usage_exit() {
  abort "Usage: $0 [-h|--help] [-e|--enable-templating] [-e|--enable-templating] [--validation=[no|lenient|strict]] TARGET"
}

function main() {
  # Call getopt to validate the provided input.
  options=$(getopt -o hde --long help,disable-templating,enable-templating,validation: -- "$@") || {
    usage_exit
  }
  if [[ $# -gt 0 ]]; then
    eval set -- "$options"
    while true; do
      case "${1}" in
      -h | --help)
        usage_exit
        ;;
      -d | --disable-templating)
        _JF_TEMPLATING_ENABLED=no
        shift
        ;;
      -e | --enable-templating)
        _JF_TEMPLATING_ENABLED=yes
        shift
        ;;
      --validation)
        _JF_VALIDATION=$2
        shift
        shift
        ;;
      --)
        shift
        break
        ;;
      *)
        abort "Internal error!"
        ;;
      esac
    done
  fi
  if [[ $# == 0 ]]; then
    _target="$(mktemp_with_content "$(cat)")"
  else
    _target="${1}"
  fi
  run_jf "${_target}" "${_JF_TEMPLATING_ENABLED}" "${_JF_VALIDATION}" "${_JF_PATH}"
}

_JF_CWD="${JF_CWD:-"$(pwd)"}"
_JF_BASEDIR="${JF_BASEDIR}"
_JF_SCHEMA_DIR="${_JF_BASEDIR}/schema"
_JF_PATH_BASE=${JF_PATH_BASE:-""}
_JF_PATH=$(_mangle_path "${JF_PATH:-"."}" "${_JF_PATH_BASE}")
_JF_TEMPLATING_ENABLED=${JF_TEMPLATING_ENABLED:-"yes"}
_JF_VALIDATION=${JF_VALIDATION:-"no"}
_JF_DEBUG=${JF_DEBUG:-"disabled"}

debug "_JF_CWD=${_JF_CWD}"
debug "_JF_BASEDIR=${_JF_BASEDIR}"
debug "_JF_PATH_BASE=${_JF_PATH_BASE}"
debug "_JF_PATH=${_JF_PATH}"
debug "_JF_TEMPLATING_ENABLED=${_JF_TEMPLATING_ENABLED}"
debug "_JF_VALIDATION=${_JF_VALIDATION}"
debug "_JF_DEBUG=${_JF_DEBUG}"

export_names_for_script_inheritance

main "${@}"
