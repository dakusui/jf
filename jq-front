#!/usr/bin/env bash
set -E -o nounset -o errexit +o posix -o pipefail
shopt -s inherit_errexit

JF_BASEDIR=$(dirname "$(readlink --canonicalize "${0}")")
export JF_BASEDIR

# shellcheck disable=SC1090
# source = lib/shared.sh
source "${JF_BASEDIR}/lib/shared.sh"
# shellcheck disable=SC1090
# source = lib/nodepool.sh
source "${JF_BASEDIR}/lib/nodepool.sh"
# shellcheck disable=SC1090
# source = lib/json.sh
source "${JF_BASEDIR}/lib/json.sh"
# shellcheck disable=SC1090
# source = lib/dependency.sh
source "${JF_BASEDIR}/lib/dependency.sh"
# shellcheck disable=SC1090
# source = lib/inheritance.sh
source "${JF_BASEDIR}/lib/inheritance.sh"
# shellcheck disable=SC1090
# source = lib/helpers.sh
source "${JF_BASEDIR}/lib/templating.sh"
# shellcheck disable=SC1090
# source = lib/helpers.sh
source "${JF_BASEDIR}/lib/helpers.sh"

function perform_jqfront() {
  local _target="${1}" _templating="${2}" _validation_mode="${3}" _jf_path="${4}"
  local _content
  perf "begin"
  mkdir -p "$(_sourced_files_dir)"
  _content="$(expand_inheritances "${_target}" "${_validation_mode}" "${_jf_path}")"
  _content=$(echo "${_content}" | jq '.|del(."$local")')
  if [[ "${_templating}" == "yes" ]]; then
    local _out
    _out=$(mktemp_with_content "${_content}")
    _content=$(perform_templating "${_out}")
  fi
  echo "${_content}"
  perf "end"
}

function export_names_for_script_inheritance() {
  export -f find_file
  export -f search_file_in
  export -f abort
  export -f message
  export _JF_PATH
  export _JF_PATH_BASE
}

function _sourced_files_dir() {
  echo "${_JF_SESSION_DIR}/source_files"
}

function usage() {
  message "Usage: $0 [-h|--help] [-e|--enable-templating] [-e|--enable-templating] [--validation=[no|lenient|strict]] TARGET"
}

function main() {
  # Call getopt to validate the provided input.
  options=$(getopt -o hde --long help,disable-templating,enable-templating,validation: -- "$@") || {
    usage_exit
  }
  if [[ $# -gt 0 ]]; then
    eval set -- "$options"
    while true; do
      case "${1}" in
      -h | --help)
        usage
        exit 0
        ;;
      -d | --disable-templating)
        _JF_TEMPLATING_ENABLED=no
        shift
        ;;
      -e | --enable-templating)
        _JF_TEMPLATING_ENABLED=yes
        shift
        ;;
      --validation)
        _JF_VALIDATION=$2
        shift
        shift
        ;;
      --)
        shift
        break
        ;;
      *)
        abort "Internal error!"
        ;;
      esac
    done
  fi
  if [[ $# == 0 ]]; then
    _target="$(mktemp_with_content "$(cat)")"
  else
    _target="${1}"
  fi
  mkdir -p "${_JF_SESSION_DIR}"
  perform_jqfront "${_target}" "${_JF_TEMPLATING_ENABLED}" "${_JF_VALIDATION}" "${_JF_PATH}"
}

_JF_CWD="${JF_CWD:-"$(pwd)"}"
_JF_BASEDIR="${JF_BASEDIR}"
_JF_PATH_BASE=${JF_PATH_BASE:-""}
_JF_PATH=$(_mangle_path "${JF_PATH:-"."}" "${_JF_PATH_BASE}")
_JF_TEMPLATING_ENABLED=${JF_TEMPLATING_ENABLED:-"yes"}
_JF_VALIDATION=${JF_VALIDATION:-"no"}
_JF_DEBUG=${JF_DEBUG:-"disabled"}
_JF_PERF=${JF_PERF:-"${_JF_DEBUG}"}
_JF_SESSION_ID="$(date +%s.%N)"
_JF_SESSION_DIR="/tmp/jq-front-${_JF_SESSION_ID}"

debug "_JF_CWD=${_JF_CWD}"
debug "_JF_BASEDIR=${_JF_BASEDIR}"
####
# JF_PATH_BASE is set when this program is run under Docker.
debug "_JF_PATH_BASE=${_JF_PATH_BASE}"
debug "_JF_PATH=${_JF_PATH}"
debug "_JF_TEMPLATING_ENABLED=${_JF_TEMPLATING_ENABLED}"
debug "_JF_VALIDATION=${_JF_VALIDATION}"
debug "_JF_DEBUG=${_JF_DEBUG}"
debug "_JF_PERF=${_JF_PERF}"

if [[ ${_JF_DEBUG} == enabled ]]; then
  trap _debug_abort ERR
fi

####
# Export JF_PATH_BASE, which is set for executions under Docker
if [[ -n "${_JF_PATH_BASE}" ]]; then
  export TMPDIR="${_JF_PATH_BASE}/tmp"
fi
export_names_for_script_inheritance
export _JF_POOL_DIR
export _JF_SCHEMA_DIR
_JF_POOL_DIR="$(nodepool_prepare)"
_JF_SCHEMA_DIR="${_JF_BASEDIR}/schema"
define_nodeentry_reader "expand_inheritances" "${_JF_POOL_DIR}"

main "${@}"
